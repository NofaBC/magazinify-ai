name: Deploy to Staging

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install dependencies for client
      - name: Install client dependencies
        run: |
          cd client
          npm ci
      
      # Build the React application
      - name: Build client
        run: |
          cd client
          npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.STAGING_API_URL }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
          REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets.STAGING_STRIPE_PUBLIC_KEY }}
      
      # Run client-side tests
      - name: Run client tests
        run: |
          cd client
          npm test -- --watchAll=false
      
      # Install dependencies for server
      - name: Install server dependencies
        run: |
          cd server
          npm ci
      
      # Run server-side tests
      - name: Run server tests
        run: |
          cd server
          npm test
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_DATABASE_URL: ${{ secrets.STAGING_FIREBASE_DATABASE_URL }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          OPENAI_API_KEY: ${{ secrets.STAGING_OPENAI_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          NODE_ENV: staging
      
      # Install and deploy Firebase functions
      - name: Setup and deploy Firebase Functions
        run: |
          cd functions
          npm ci
          npx firebase-tools deploy --only functions --project ${{ secrets.STAGING_FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      
      # Deploy frontend to Vercel staging environment
      - name: Deploy client to Vercel (Staging)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_CLIENT_PROJECT_ID }}
          working-directory: ./client
          alias-domains: |
            staging.magazinify.ai
      
      # Deploy backend to Vercel staging environment
      - name: Deploy server to Vercel (Staging)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_SERVER_PROJECT_ID }}
          working-directory: ./server
          alias-domains: |
            api.staging.magazinify.ai
