import { VercelRequest, VercelResponse } from '@vercel/node';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { website } = req.body;

    if (!website) {
      return res.status(400).json({ error: 'Website URL required' });
    }

    // Validate URL
    let hostname: string;
    try {
      const url = new URL(website);
      hostname = url.hostname;
    } catch {
      return res.status(400).json({ error: 'Invalid website URL' });
    }

    // Generate PDF using pdf-lib
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([612, 792]); // Letter size (8.5" x 11")
    const { width, height } = page.getSize();
    
    // Load fonts
    const titleFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    const bodyFont = await pdfDoc.embedFont(StandardFonts.Helvetica);

    // Magazine header
    page.drawText('BUSINESS MAGAZINE', {
      x: 50,
      y: height - 80,
      size: 24,
      font: titleFont,
      color: rgb(0.1, 0.1, 0.1),
    });

    // Website title
    page.drawText(`Featured: ${hostname}`, {
      x: 50,
      y: height - 120,
      size: 16,
      font: bodyFont,
      color: rgb(0.3, 0.3, 0.3),
    });

    // Content sections
    const sections = [
      'Company Overview',
      'Products & Services', 
      'Market Position',
      'Innovation & Technology',
      'Future Outlook'
    ];

    let yPosition = height - 180;
    sections.forEach((section) => {
      // Section header
      page.drawText(section, {
        x: 50,
        y: yPosition,
        size: 14,
        font: titleFont,
        color: rgb(0.2, 0.2, 0.2),
      });

      // Sample content
      page.drawText(`This section will contain AI-generated content about ${section.toLowerCase()}`, {
        x: 50,
        y: yPosition - 20,
        size: 10,
        font: bodyFont,
        color: rgb(0.4, 0.4, 0.4),
      });

      page.drawText(`from analysis of ${website}. Real AI content coming in Brick 6.`, {
        x: 50,
        y: yPosition - 35,
        size: 10,
        font: bodyFont,
        color: rgb(0.4, 0.4, 0.4),
      });

      yPosition -= 80;
    });

    // Footer
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    
    page.drawText(`Generated by Magazinify AI™ • ${currentDate}`, {
      x: 50,
      y: 50,
      size: 8,
      font: bodyFont,
      color: rgb(0.6, 0.6, 0.6),
    });

    // Generate PDF bytes
    const pdfBytes = await pdfDoc.save();

    // Return PDF with proper headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'inline; filename="magazinify-preview.pdf"');
    res.setHeader('Content-Length', pdfBytes.length);
    
    return res.status(200).send(Buffer.from(pdfBytes));

  } catch (error) {
    console.error('PDF generation error:', error);
    return res.status(500).json({ 
      error: 'Failed to generate PDF',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
