import type { VercelRequest, VercelResponse } from "@vercel/node";
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

type GenerateBody = {
  website?: string;
  title?: string;
  theme?: "modern" | "editorial" | "minimal";
};

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== "POST") {
    res.setHeader("allow", "POST");
    return res.status(405).send("Method Not Allowed");
  }

  // Body may arrive parsed or as a string depending on client
  let body: GenerateBody = {};
  try {
    body = typeof req.body === "string" ? JSON.parse(req.body) : (req.body || {});
  } catch {
    return res.status(400).send("Invalid JSON body");
  }

  const website = (body.website || "").trim() || "https://yourbusiness.com";
  const title = (body.title || "Magazinify AI â€” Print Preview").trim();
  const theme = body.theme || "modern";

  // Build a tiny multi-page PDF
  const pdfDoc = await PDFDocument.create();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const page1 = pdfDoc.addPage([612, 792]); // Letter
  const page2 = pdfDoc.addPage([612, 792]);
  const page3 = pdfDoc.addPage([612, 792]);

  // Cover
  page1.drawText(title, { x: 72, y: 700, size: 24, font, color: rgb(0.1, 0.6, 0.95) });
  page1.drawText(`Website: ${website}`, { x: 72, y: 670, size: 12, font, color: rgb(0.9, 0.9, 0.95) });
  page1.drawText(`Theme: ${theme}`, { x: 72, y: 650, size: 12, font, color: rgb(0.9, 0.9, 0.95) });
  page1.drawText("Generated by Magazinify AI (sync demo)", { x: 72, y: 620, size: 12, font, color: rgb(0.75, 0.8, 0.9) });

  // Contents
  page2.drawText("Contents", { x: 72, y: 700, size: 18, font, color: rgb(0.95, 0.95, 0.98) });
  ["Feature", "Spotlight", `Visit: ${website}`].forEach((item, i) => {
    page2.drawText(`${i + 1}. ${item}`, { x: 90, y: 670 - i * 20, size: 12, font, color: rgb(0.85, 0.88, 0.95) });
  });

  // Feature
  const featureText =
    "This is a placeholder feature article. In later bricks, the backend will ingest your website, " +
    "summarize key sections, design a layout, and render a fully-branded PDF.";
  page3.drawText("Feature", { x: 72, y: 700, size: 18, font, color: rgb(0.95, 0.95, 0.98) });
  wrapText(page3, font, featureText, 12, 72, 670, 468, 16, rgb(0.85, 0.88, 0.95));

  const pdfBytes = await pdfDoc.save();

  res.setHeader("Content-Type", "application/pdf");
  res.setHeader("Content-Disposition", 'inline; filename="magazinify.pdf"');
  res.status(200).send(Buffer.from(pdfBytes));
}

// Simple text wrapper for pdf-lib
function wrapText(
  page: any,
  font: any,
  text: string,
  size: number,
  x: number,
  yStart: number,
  maxWidth: number,
  lineHeight: number,
  color = rgb(0, 0, 0)
) {
  const words = text.split(" ");
  let line = "";
  let y = yStart;

  for (const w of words) {
    const test = line ? line + " " + w : w;
    const width = font.widthOfTextAtSize(test, size);
    if (width > maxWidth) {
      page.drawText(line, { x, y, size, font, color });
      line = w;
      y -= lineHeight;
    } else {
      line = test;
    }
  }
  if (line) page.drawText(line, { x, y, size, font, color });
}
