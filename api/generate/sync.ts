import { VercelRequest, VercelResponse } from '@vercel/node';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { db, isFirebaseReady } from '../../lib/firebase.js';
import { ProjectDoc, IssueDoc } from '../../lib/types.js';
import { Timestamp } from 'firebase-admin/firestore';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { website } = req.body;

    if (!website) {
      return res.status(400).json({ error: 'Website URL required' });
    }

    // Validate URL
    let hostname: string;
    try {
      const url = new URL(website);
      hostname = url.hostname;
    } catch {
      return res.status(400).json({ error: 'Invalid website URL' });
    }

    // Generate PDF (same as Brick 1)
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([612, 792]); // Letter size
    const { width, height } = page.getSize();
    
    // Load fonts
    const titleFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    const bodyFont = await pdfDoc.embedFont(StandardFonts.Helvetica);

    // Magazine header
    page.drawText('BUSINESS MAGAZINE', {
      x: 50,
      y: height - 80,
      size: 24,
      font: titleFont,
      color: rgb(0.1, 0.1, 0.1),
    });

    // Website title
    page.drawText(`Featured: ${hostname}`, {
      x: 50,
      y: height - 120,
      size: 16,
      font: bodyFont,
      color: rgb(0.3, 0.3, 0.3),
    });

    // Content sections
    const sections = [
      'Company Overview',
      'Products & Services', 
      'Market Position',
      'Innovation & Technology',
      'Future Outlook'
    ];

    let yPosition = height - 180;
    sections.forEach((section) => {
      // Section header
      page.drawText(section, {
        x: 50,
        y: yPosition,
        size: 14,
        font: titleFont,
        color: rgb(0.2, 0.2, 0.2),
      });

      // Sample content
      page.drawText(`This section would contain AI-generated content about ${section.toLowerCase()}`, {
        x: 50,
        y: yPosition - 20,
        size: 10,
        font: bodyFont,
        color: rgb(0.4, 0.4, 0.4),
      });

      page.drawText(`from analysis of ${website}. Lorem ipsum content placeholder.`, {
        x: 50,
        y: yPosition - 35,
        size: 10,
        font: bodyFont,
        color: rgb(0.4, 0.4, 0.4),
      });

      yPosition -= 80;
    });

    // Footer
    page.drawText(`Generated by Magazinify AI™ • ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 50,
      size: 8,
      font: bodyFont,
      color: rgb(0.6, 0.6, 0.6),
    });

    // Generate PDF bytes
    const pdfBytes = await pdfDoc.save();

    // Firestore writes (if Firebase is configured)
    let projectId: string | null = null;
    let issueId: string | null = null;

    if (isFirebaseReady && db) {
      try {
        const now = Timestamp.now();
        
        // 1. Find or create project by website
        const projectsRef = db.collection('projects');
        const existingProject = await projectsRef.where('website', '==', website).limit(1).get();
        
        if (!existingProject.empty) {
          // Use existing project
          projectId = existingProject.docs[0].id;
        } else {
          // Create new project
          const projectDoc: ProjectDoc = {
            website,
            createdAt: now,
          };
          const newProjectRef = await projectsRef.add(projectDoc);
          projectId = newProjectRef.id;
        }

        // 2. Create issue record
        const issueDoc: IssueDoc = {
          projectId,
          title: `Magazine for ${hostname}`,
          status: 'succeeded',
          pages: 1,
          createdAt: now,
          // pdfUrl will be added in future brick when we upload to Firebase Storage
        };
        
        const issueRef = await db.collection('issues').add(issueDoc);
        issueId = issueRef.id;

        console.log(`Created project: ${projectId}, issue: ${issueId} for ${website}`);
        
      } catch (dbError) {
        console.error('Firestore write failed:', dbError);
        // Continue serving PDF even if DB write fails
      }
    } else {
      console.warn('Firebase not configured - skipping database writes');
    }

    // Set response headers with project/issue IDs
    if (projectId) res.setHeader('x-project-id', projectId);
    if (issueId) res.setHeader('x-issue-id', issueId);
    
    // Return PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'inline; filename="magazine-preview.pdf"');
    res.setHeader('Content-Length', pdfBytes.length);
    
    return res.status(200).send(Buffer.from(pdfBytes));

  } catch (error) {
    console.error('PDF generation error:', error);
    
    if (!isFirebaseReady) {
      return res.status(503).json({ 
        error: 'Firebase not configured',
        details: 'Service temporarily unavailable'
      });
    }
    
    return res.status(500).json({ 
      error: 'Failed to generate PDF',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
